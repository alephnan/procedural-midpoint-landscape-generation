{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/linked-list.ts","src/main.ts","src/pair.ts","src/scrolling-midpoint-displacer-linkedlist.ts","src/splittable-line.ts"],"names":[],"mappings":"AAAA;;ACMA;IAKE,cAAY,IAAS;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IACH,WAAC;AAAD,CAVA,AAUC,IAAA;AAVY,oBAAI;AAYjB;IAKE;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACnB,CAAC;IAED,2BAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,wBAAG,GAAH,UAAI,KAAa;QACf,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;IAClC,CAAC;IAGO,4BAAO,GAAf,UAAgB,KAAa;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,IAAI,GAAU,IAAI,CAAC,KAAK,CAAC;QAC7B,OAAM,IAAI,IAAI,IAAI,EAAE,CAAC;YACnB,EAAE,CAAA,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;gBACd,KAAK,CAAC;YACR,CAAC;YACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjB,CAAC,EAAE,CAAC;QACN,CAAC;QAED,EAAE,CAAA,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;YACd,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAGD,wBAAG,GAAH;QACE,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QAED,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;QACnB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QACzB,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAGD,yBAAI,GAAJ,UAAK,CAAM;QACT,IAAM,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACnB,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QAChB,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAID,6BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IACxB,CAAC;IAED,4BAAO,GAAP,UAAQ,CAAW;QACjB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,IAAI,GAAU,IAAI,CAAC,KAAK,CAAC;QAC7B,OAAM,IAAI,IAAI,IAAI,EAAE,CAAC;YACnB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACb,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjB,CAAC,EAAE,CAAC;QACN,CAAC;IACH,CAAC;IAED,4BAAO,GAAP,UAAQ,KAAa,EAAG,KAAiB;QAEvC,EAAE,CAAA,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;YACb,MAAM,KAAK,EAAE,CAAC;QAChB,CAAC;QACD,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;YACtB,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;QAC/B,CAAC;QACD,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,KAAK,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC;QACD,EAAE,CAAA,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1B,MAAM,KAAK,CAAC,kBAAkB,CAAC,CAAC;QAClC,CAAC;QAGD,IAAI,CAAC,OAAO,EAAE,CAAC;QAGf,IAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC,IAAM,SAAS,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpC,QAAQ,CAAC,IAAI,GAAG,SAAS,CAAC;QAC1B,SAAS,CAAC,IAAI,GAAG,QAAQ,CAAC;QAE1B,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;YAC5B,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAA,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;YAC/B,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YAC/B,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,IAAI,GAAU,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAEtC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;YAEtB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;YACrB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QACxB,CAAC;IACH,CAAC;IACH,iBAAC;AAAD,CArIA,AAqIC,IAAA;AArIY,gCAAU;;;;ACfvB,qGAAiG;AAEjG,IAAM,MAAM,GAAG,UAAU,CAAM;IAC7B,IAAM,CAAC,GAAY,GAAG,CAAC;IACvB,IAAM,CAAC,GAAY,GAAG,CAAC;IACvB,IAAM,GAAG,GAAsB,IAAI,8EAAoC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAElF,CAAC,CAAC,KAAK,GAAG;QACR,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAErB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEhC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAEzB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAElB,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IAClB,CAAC,CAAC;IAEF,CAAC,CAAC,IAAI,GAAG;QACP,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChC,GAAG,CAAC,MAAM,EAAE,CAAC;QACb,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC,CAAC;AAGF,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;;;ACzB7B;IAGI,cAAY,CAAI,EAAE,CAAI;QAClB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAEM,uBAAQ,GAAf;QACI,MAAM,CAAC,UAAQ,IAAI,CAAC,CAAC,SAAI,IAAI,CAAC,CAAC,MAAG,CAAC;IACvC,CAAC;IAEM,2BAAY,GAAnB;QACI,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IACL,WAAC;AAAD,CAfA,AAeC,IAAA;AAfY,oBAAI;;;;ACDjB,+BAA4B;AAC5B,qDAAmD;AACnD,6CAA2C;AAE3C;IAaE,8CAAY,iBAAyB,EAAE,CAAS,EAAE,CAAS;QACzD,IAAM,KAAK,GAAgB,IAAI,wBAAU,EAAE,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAM,EAAE,GAAiB,IAAI,WAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC1C,IAAM,EAAE,GAAiB,IAAI,WAAI,CAAC,CAAC,GAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC5C,IAAM,gBAAgB,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACrC,IAAM,CAAC,GAAoB,IAAI,gCAAc,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAG,gBAAgB,CAAC,CAAC;QAC5E,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEd,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,aAAa,GAAG,IAAI,WAAI,CAAS,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAEjD,GAAG,CAAA,CAAC,IAAI,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACtB,CAAC;IAEM,qDAAM,GAAb,UAAc,CAAK;QACjB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,CAAiB;YACzC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,wDAAS,GAAhB;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QACvC,OAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YACb,IAAM,CAAC,GAAoB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAGxC,EAAE,CAAA,CAAC,CAAC,oCAAoC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/D,IAAM,KAAK,GAA0B,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACpE,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1B,CAAC;YAED,CAAC,EAAE,CAAC;QACN,CAAC;IACH,CAAC;IAEM,qDAAM,GAAb;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;QAGlB,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,EAAE,CAAC;QAGjB,EAAE,CAAA,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAM,IAAI,GAAoB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;YAC3D,IAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;YAC9C,IAAM,aAAa,GAAG,IAAI,WAAI,CAAC,IAAI,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACxG,IAAM,OAAO,GAAG,IAAI,gCAAc,CAAC,eAAe,EAAE,aAAa,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAC3G,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IAGM,uDAAkB,GAAzB,UAA0B,CAAkB;QAC1C,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IACH,2CAAC;AAAD,CA7EA,AA6EC;AA5EQ,8CAAS,GAAY,EAAE,CAAC;AADpB,oFAAoC;;;;ACRjD,+BAA4B;AAM5B;IAOE,wBAAY,CAAe,EAAE,CAAe,EAAE,UAAkB,EAAE,gBAAwB;QACxF,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEM,iCAAQ,GAAf;QACE,MAAM,CAAC,UAAQ,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,UAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAG,CAAC;IAC5D,CAAC;IAEM,oCAAW,GAAlB;QACE,IAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACpC,IAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACpC,MAAM,CAAC,IAAI,WAAI,CAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC;IAEM,kDAAyB,GAAhC;QACE,IAAM,qBAAqB,GAAG,SAAA,CAAC,EAAI,CAAC,CAAC,CAAC,GAAC,cAAc,CAAC,SAAS,CAAC,CAAA,CAAC;QACjE,IAAM,iBAAiB,GAAI,SAAA,qBAAqB,EAAE,IAAI,CAAC,UAAU,CAAA,CAAC;QAClE,MAAM,CAAC,IAAI,CAAC,gBAAgB,GAAG,iBAAiB,CAAC;IACnD,CAAC;IAEM,sCAAa,GAApB;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,4CAAmB,GAA1B;QACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,iCAAQ,GAAf,UAAgB,aAA2B;QACzC,IAAM,qBAAqB,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAC/D,IAAM,SAAS,GAAkB,IAAI,CAAC,CAAC,CAAC;QACxC,IAAM,UAAU,GAAiB,IAAI,CAAC,CAAC,CAAC;QAGxC,IAAM,QAAQ,GAAkB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnD,IAAM,2BAA2B,GAAkB,IAAI,CAAC,uBAAuB,CAC7E,QAAQ,EAAE,qBAAqB,EAAE,aAAa,CAAC,CAAC;QAElD,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;QAC5C,IAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACpD,IAAM,kBAAkB,GAAoB,IAAI,cAAc,CAAC,SAAS,EAAE,2BAA2B,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACrI,IAAM,mBAAmB,GAAoB,IAAI,cAAc,CAAC,2BAA2B,EAAE,UAAU,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;QAEvI,MAAM,CAAC,IAAI,WAAI,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;IAC3D,CAAC;IAEQ,gDAAuB,GAA/B,UAAgC,CAAe,EAAE,iBAAyB,EAAE,aAA2B;QACtG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,iBAAiB,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAGnE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;QAEpD,MAAM,CAAC,IAAI,WAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,CAAC;IAGO,+BAAM,GAAd,UAAe,OAAmB;QAChC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7D,CAAC;IAEO,8BAAK,GAAb,UAAc,CAAS,EAAE,UAAkB,EAAE,UAAkB;QAC7D,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IACvD,CAAC;IACH,qBAAC;AAAD,CAzEA,AAyEC;AAxEQ,wBAAS,GAAW,EAAE,CAAC;AADnB,wCAAc","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Doubly Linked List Data structure\n */\nimport {Line} from './line';\nimport {Pair} from './pair';\n\nexport class Node {\n  public data: any;\n  public prev: Node;\n  public next: Node;\n\n  constructor(data: any) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n}\n\nexport class LinkedList {\n  private first: Node;\n  private last: Node;\n  private length_: number;\n\n  constructor() {\n    this.first = null;\n    this.last = null;\n    this.length_ = 0;\n  }\n\n  length() : number {\n    return this.length_;\n  }\n\n  get(index: number) : any {\n    return this.getNode(index).data;\n  }\n\n  // TODO(automatwon): Loop backward from end if closer to index.\n  private getNode(index: number) : Node {\n    let i = 0;\n    let curr : Node = this.first;\n    while(curr != null) {\n      if(i == index) {\n        break;\n      }\n      curr = curr.next;\n      i++;\n    }\n\n    if(i != index) {\n      throw Error('Invalid index');\n    }\n    return curr;\n  }\n\n  // Throws null pointer if no element to pop\n  pop() : Line {\n    if(!(this.first)) {\n      throw new Error(\"Nothing to pop\");\n    }\n\n    const node = this.first;\n    if(node.next == null) {\n      this.first = null\n    } else {\n      this.first = node.next;\n      this.first.prev = null;\n    }\n    this.length_--;\n    return node.data;\n  }\n\n  // be stricter about the type to e: Line`\n  push(e: any) {\n    const n = new Node(e);\n    if(this.last == null) {\n      this.first = n;\n      this.last = n;\n    } else {\n      this.last.next = n;\n      n.prev = this.last;\n      this.last = n;\n    }\n\n    this.length_++;\n  }\n\n  // TODO(automatwon): add peekFirst\n\n  peekLast() : any {\n    return this.last.data;\n  }\n\n  forEach(f: Function) : void {\n    let i = 0;\n    let curr : Node = this.first;\n    while(curr != null) {\n      f(curr.data);\n      curr = curr.next;\n      i++;\n    }\n  }\n\n  splitAt(index: number,  split: Pair<Line>) {\n    // TODO(automatwon): Disable these defensive checks for performance\n    if(index < 0) {\n      throw Error();\n    }\n    if(this.first == null) {\n      throw Error('Invalid index');\n    }\n    if(this.first.next == null && index != 0) {\n      throw Error('Index DNE');\n    }\n    if(index >= this.length()) {\n      throw Error('Index out bounds');\n    }\n    \n    // Replace one element with two\n    this.length_++;\n\n    // Link the elements\n    const leftNode = new Node(split.x);\n    const rightNode = new Node(split.y);\n    leftNode.next = rightNode;\n    rightNode.prev = leftNode;\n\n    if(this.first.next == null) { // 1 element\n      this.first = leftNode;\n      this.last = rightNode;\n    } else if(index == 0) { // First Element\n      const next = this.first.next\n      rightNode.next = next;\n      this.first = leftNode;\n      next.prev = rightNode;\n    } else if(index == this.length() - 2) { // last element \n      this.last.prev.next = leftNode;\n      leftNode.prev = this.last.prev;      \n      this.last = rightNode;\n    } else { // middle case\n      let curr : Node = this.getNode(index);\n      \n      const prev = curr.prev;\n      const next = curr.next;\n      leftNode.prev = prev;\n      rightNode.next = next;\n\n      prev.next = leftNode;        \n      next.prev = rightNode;\n    }\n  }\n}","///<reference path=\"p5.d.ts\" />\n\nimport {TerrainGenerator} from './terrain-generator';\nimport { ScrollingMidpointDisplacerLinkedList } from './scrolling-midpoint-displacer-linkedlist';\n\nconst sketch = function (p : p5) {\n  const W : number = 600;\n  const H : number = 400;\n  const mdp : TerrainGenerator = new ScrollingMidpointDisplacerLinkedList(10, W, H);\n\n  p.setup = function () {\n    p.createCanvas(W, H);\n\n    p.background(p.color('yellow'));\n\n    p.stroke(p.color('red'));\n\n    p.strokeWeight(2);\n\n    p.frameRate(10);\n  };\n\n  p.draw = function() {\n    p.background(p.color('yellow'));\n    mdp.update(); \n    mdp.render(p);\n  };\n};\n\n// TODO(freefood): fix data.json to have more explicit type \nnew p5(sketch, false, false);","/**\n * class to represent pair of Ts\n *\n */\n\nexport class Pair<T> {\n    public x : T;\n    public y : T;\n    constructor(x: T, y: T) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public toString() {\n        return `Pair(${this.x},${this.y})`;\n    }\n    \n    public shallowClone() : Pair<T> {\n        return new Pair(this.x, this.y);\n    }\n}","///<reference path=\"p5.d.ts\" />\n/**\n * Data Structure for set of line segments generated via midpoint displacement\n */\nimport {Pair} from './pair';\nimport { SplittableLine } from './splittable-line';\nimport { LinkedList } from './linked-list';\n\nexport class ScrollingMidpointDisplacerLinkedList {\n  static ROUGHNESS : number = .8;\n\n  // TODO(automatwon): this is probably more efficiently represented as sequence\n  // of points. But easier to implement with SplittableLines for now\n  private lineSegments: LinkedList;\n\n  private w: number;\n  private h: number;\n  private baseDisplacement: number;\n  private verticalBound: Pair<number>;\n  private iterations: number;\n\n  constructor(initialResolution: number, w: number, h: number) {\n    const lines : LinkedList = new LinkedList();\n    this.lineSegments = lines;\n\n    const p1 : Pair<number>= new Pair(0, 150);\n    const p2 : Pair<number>= new Pair(w/4, 250);\n    const baseDisplacement = p1.y - p2.y;\n    const l : SplittableLine = new SplittableLine(p1, p2, 0,  baseDisplacement);\n    lines.push(l);\n\n    this.w = w;\n    this.h = h;\n    this.verticalBound = new Pair<number>(0, this.h);\n\n    for(let i = 0 ; i < 20; i++) {\n      this.propagate();\n    }\n\n    this.iterations = 0;\n  }\n\n  public render(p: p5) {\n    this.lineSegments.forEach((l: SplittableLine) => {\n       p.line(l.a.x, l.a.y, l.b.x, l.b.y);\n    });\n  }\n\n  public propagate() {\n    const lines = this.lineSegments;\n    let i = this.lineSegments.length() - 1;    \n    while(i >= 0) {\n      const l : SplittableLine = lines.get(i);\n      // TODO(automatwon): consider dropping this if we are using set of points,\n      // instead of line segments, where we can compare adjacent pairs\n      if(!ScrollingMidpointDisplacerLinkedList.skipSplittableLine(l)) {\n        const split : Pair<SplittableLine> = l.getSplit(this.verticalBound);\n        lines.splitAt(i, split);\n      }\n   \n      i--;\n    }\n  }\n  \n  public update() {\n    this.iterations++;\n      \n    // Dequeue earliest line segments\n    this.lineSegments.pop();\n    this.propagate();\n\n    // Enqueue lines\n    if(this.iterations % 70 == 0) {\n        const last : SplittableLine = this.lineSegments.peekLast();\n        const beginCoordinate = last.b.shallowClone();\n        const endCoordinate = new Pair(this.w/4*(1+(this.iterations / 70)), Math.floor(this.h * Math.random()));\n        const newLine = new SplittableLine(beginCoordinate, endCoordinate, 0, beginCoordinate.y - endCoordinate.y);\n        this.lineSegments.push(newLine);\n    }\n  }\n\n  // Condition to stop looping\n  static skipSplittableLine(l : SplittableLine) : boolean {\n    return l.b.x - l.a.x < 2;\n  }\n}\n","import {Pair} from './pair';\n\n/**\n * class to represent Line segment with additional data for midpoint displacement splitting\n */\n\nexport class SplittableLine {\n  static ROUGHNESS: number = .6;\n  public a: Pair<number>;\n  public b: Pair<number>;\n  private generation: number;\n  private baseDisplacement: number;\n\n  constructor(a: Pair<number>, b: Pair<number>, generation: number, baseDisplacement: number) {\n    this.a = a;\n    this.b = b;\n    this.generation = generation;\n    this.baseDisplacement = baseDisplacement;\n  }\n\n  public toString() {\n    return `Line(${this.a.toString()}->${this.b.toString()})`;\n  }\n\n  public getMidpoint() : Pair<number> {\n    const x = (this.b.x + this.a.x) / 2;\n    const y = (this.b.y + this.a.y) / 2;\n    return new Pair<number>(x, y);\n  }\n\n  public nextDisplacementMagnitude() : number {\n    const baseDisplacementScale = 2 ** (-1*SplittableLine.ROUGHNESS);\n    const displacementScale =  baseDisplacementScale**this.generation;\n    return this.baseDisplacement * displacementScale;\n  }\n\n  public getGeneration(): number {\n    return this.generation;\n  }\n\n  public getBaseDisplacement(): number {\n    return this.baseDisplacement;\n  }\n\n  public getSplit(verticalBound: Pair<number>): Pair<SplittableLine> {\n    const displacementMagnitude = this.nextDisplacementMagnitude();\n    const leftPoint : Pair<number> = this.a;\n    const rightPoint : Pair<number>= this.b;\n\n    // Compute displaced midpoint\n    const midpoint : Pair<number> = this.getMidpoint();\n    const verticallyDisplacedMidpoint : Pair<number> = this.displacePointVertically(\n      midpoint, displacementMagnitude, verticalBound);\n\n    const generation = this.getGeneration() + 1;\n    const baseDisplacement = this.getBaseDisplacement();\n    const leftSplittableLine : SplittableLine = new SplittableLine(leftPoint, verticallyDisplacedMidpoint, generation, baseDisplacement);\n    const rightSplittableLine : SplittableLine = new SplittableLine(verticallyDisplacedMidpoint, rightPoint, generation, baseDisplacement);\n\n    return new Pair(leftSplittableLine, rightSplittableLine);\n  }\n\n   private displacePointVertically(p: Pair<number>, displaceMagnitude: number, verticalBound: Pair<number>) : Pair<number>{\n    let y = p.y + this.choose([displaceMagnitude, -displaceMagnitude]);\n    \n    // Bound the value to within window\n    y = this.clamp(y, verticalBound.x, verticalBound.y);\n\n    return new Pair(p.x, y);\n  }\n\n    // Private static final: move into utility or global.d.ts\n  private choose(choices: Array<any>) {\n    return choices[Math.floor(Math.random() * choices.length)];\n  }\n\n  private clamp(x: number, lowerBound: number, upperBound: number) {\n    return Math.min(upperBound, Math.max(x, lowerBound));\n  }\n}"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}