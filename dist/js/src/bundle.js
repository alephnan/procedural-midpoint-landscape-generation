(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Node = (function () {
    function Node(data) {
        this.prev = null;
        this.next = null;
        this.data = data;
    }
    return Node;
}());
exports.Node = Node;
var LinkedList = (function () {
    function LinkedList() {
        this.first = null;
        this.last = null;
        this.length_ = 0;
    }
    LinkedList.prototype.length = function () {
        return this.length_;
    };
    LinkedList.prototype.get = function (index) {
        return this.getNode(index).data;
    };
    LinkedList.prototype.getNode = function (index) {
        var i = 0;
        var curr = this.first;
        while (curr != null) {
            if (i == index) {
                break;
            }
            curr = curr.next;
            i++;
        }
        if (i != index) {
            throw Error('Invalid index');
        }
        return curr;
    };
    LinkedList.prototype.pop = function () {
        if (!(this.first)) {
            throw new Error("Nothing to pop");
        }
        var node = this.first;
        if (node.next == null) {
            this.first = null;
        }
        else {
            this.first = node.next;
            this.first.prev = null;
        }
        this.length_--;
        return node.data;
    };
    LinkedList.prototype.push = function (e) {
        var n = new Node(e);
        if (this.last == null) {
            this.first = n;
            this.last = n;
        }
        else {
            this.last.next = n;
            n.prev = this.last;
            this.last = n;
        }
        this.length_++;
    };
    LinkedList.prototype.peekLast = function () {
        return this.last.data;
    };
    LinkedList.prototype.forEach = function (f) {
        var i = 0;
        var curr = this.first;
        while (curr != null) {
            f(curr.data);
            curr = curr.next;
            i++;
        }
    };
    LinkedList.prototype.splitAt = function (index, split) {
        if (index < 0) {
            throw Error();
        }
        if (this.first == null) {
            throw Error('Invalid index');
        }
        if (this.first.next == null && index != 0) {
            throw Error('Index DNE');
        }
        if (index >= this.length()) {
            throw Error('Index out bounds');
        }
        this.length_++;
        var leftNode = new Node(split.x);
        var rightNode = new Node(split.y);
        leftNode.next = rightNode;
        rightNode.prev = leftNode;
        if (this.first.next == null) {
            this.first = leftNode;
            this.last = rightNode;
        }
        else if (index == 0) {
            var next = this.first.next;
            rightNode.next = next;
            this.first = leftNode;
            next.prev = rightNode;
        }
        else if (index == this.length() - 2) {
            this.last.prev.next = leftNode;
            leftNode.prev = this.last.prev;
            this.last = rightNode;
        }
        else {
            var curr = this.getNode(index);
            var prev = curr.prev;
            var next = curr.next;
            leftNode.prev = prev;
            rightNode.next = next;
            prev.next = leftNode;
            next.prev = rightNode;
        }
    };
    return LinkedList;
}());
exports.LinkedList = LinkedList;

},{}],2:[function(require,module,exports){
"use strict";
var scrolling_midpoint_displacer_linkedlist_1 = require("./scrolling-midpoint-displacer-linkedlist");
var sketch = function (p) {
    var MARGIN_PERCENTAGE = .15;
    var W = 1400;
    var H = 400;
    var minimumW = 800;
    var maximumH = Math.round(H * (1 - MARGIN_PERCENTAGE));
    var mdp = new scrolling_midpoint_displacer_linkedlist_1.ScrollingMidpointDisplacerLinkedList(minimumW, maximumH);
    p.setup = function () {
        p.createCanvas(W, H);
        p.strokeWeight(2);
        p.frameRate(20);
    };
    p.draw = function () {
        p.background(p.color('black'));
        p.push();
        p.translate(0, MARGIN_PERCENTAGE * H / 2);
        p.stroke(p.color(98, 203, 157));
        mdp.update();
        mdp.render(p);
        p.pop();
        p.stroke(p.color('white'));
        p.line(minimumW, 0, minimumW, H);
        p.fill(p.color(211, 245, 235, 90));
        p.rect(minimumW, 0, W, H);
    };
};
new p5(sketch, false, false);

},{"./scrolling-midpoint-displacer-linkedlist":4}],3:[function(require,module,exports){
"use strict";
var Pair = (function () {
    function Pair(x, y) {
        this.x = x;
        this.y = y;
    }
    Pair.prototype.toString = function () {
        return "Pair(" + this.x + "," + this.y + ")";
    };
    Pair.prototype.shallowClone = function () {
        return new Pair(this.x, this.y);
    };
    return Pair;
}());
exports.Pair = Pair;

},{}],4:[function(require,module,exports){
"use strict";
var pair_1 = require("./pair");
var splittable_line_1 = require("./splittable-line");
var linked_list_1 = require("./linked-list");
var ScrollingMidpointDisplacerLinkedList = (function () {
    function ScrollingMidpointDisplacerLinkedList(minimumWidth, maximumHeight) {
        this.verticalBound = new pair_1.Pair(0, maximumHeight);
        var lines = new linked_list_1.LinkedList();
        this.lineSegments = lines;
        var p1 = new pair_1.Pair(0, 150);
        var p2 = new pair_1.Pair(ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH, 250);
        var baseDisplacement = p1.y - p2.y;
        var l = new splittable_line_1.SplittableLine(p1, p2, 0, baseDisplacement);
        lines.push(l);
        var numBaseLineSegments = minimumWidth / ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH;
        for (var i = 0; i < numBaseLineSegments; i++) {
            this.enqueue();
        }
        this.enqueueInterval = Math.pow(ScrollingMidpointDisplacerLinkedList.POWER, (ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS - 1));
        for (var i = 0; i < ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS; i++) {
            this.displace();
        }
        this.iterations = 0;
    }
    ScrollingMidpointDisplacerLinkedList.prototype.render = function (p) {
        this.lineSegments.forEach(function (l) {
            p.line(l.a.x, l.a.y, l.b.x, l.b.y);
        });
    };
    ScrollingMidpointDisplacerLinkedList.prototype.enqueue = function () {
        var last = this.lineSegments.peekLast();
        var beginCoordinate = new pair_1.Pair(last.b.x + 0, last.b.y + 0);
        var endCoordinate = new pair_1.Pair(beginCoordinate.x +
            ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH, Math.floor(this.verticalBound.y * Math.random()));
        var newLine = new splittable_line_1.SplittableLine(beginCoordinate, endCoordinate, 0, beginCoordinate.y - endCoordinate.y);
        this.lineSegments.push(newLine);
    };
    ScrollingMidpointDisplacerLinkedList.prototype.displace = function () {
        var lines = this.lineSegments;
        var i = this.lineSegments.length() - 1;
        while (i >= 0) {
            var l = lines.get(i);
            if (!ScrollingMidpointDisplacerLinkedList.skipSplittableLine(l)) {
                var split = l.getSplit(this.verticalBound);
                lines.splitAt(i, split);
            }
            i--;
        }
    };
    ScrollingMidpointDisplacerLinkedList.prototype.scroll = function () {
        var deltaX = ScrollingMidpointDisplacerLinkedList.MINIMUM_LINE_WIDTH;
        this.lineSegments.forEach(function (l) {
            l.translate(-1 * deltaX, 0);
        });
    };
    ScrollingMidpointDisplacerLinkedList.prototype.update = function () {
        this.iterations++;
        this.lineSegments.pop();
        this.displace();
        if (this.iterations % this.enqueueInterval == 0) {
            this.enqueue();
        }
        this.scroll();
    };
    ScrollingMidpointDisplacerLinkedList.skipSplittableLine = function (l) {
        return l.getGeneration() >= ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS - 1;
    };
    return ScrollingMidpointDisplacerLinkedList;
}());
ScrollingMidpointDisplacerLinkedList.POWER = 2;
ScrollingMidpointDisplacerLinkedList.MINIMUM_LINE_WIDTH = 2;
ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS = 7;
ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH = (ScrollingMidpointDisplacerLinkedList.MINIMUM_LINE_WIDTH *
    Math.pow(ScrollingMidpointDisplacerLinkedList.POWER, (ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS - 1)));
exports.ScrollingMidpointDisplacerLinkedList = ScrollingMidpointDisplacerLinkedList;

},{"./linked-list":1,"./pair":3,"./splittable-line":5}],5:[function(require,module,exports){
"use strict";
var pair_1 = require("./pair");
var SplittableLine = (function () {
    function SplittableLine(a, b, generation, baseDisplacement) {
        this.a = a;
        this.b = b;
        this.generation = generation;
        this.baseDisplacement = baseDisplacement;
    }
    SplittableLine.prototype.toString = function () {
        return "Line(" + this.a.toString() + "->" + this.b.toString() + ")";
    };
    SplittableLine.prototype.getMidpoint = function () {
        var x = (this.b.x + this.a.x) / 2;
        var y = (this.b.y + this.a.y) / 2;
        return new pair_1.Pair(x, y);
    };
    SplittableLine.prototype.nextDisplacementMagnitude = function () {
        var baseDisplacementScale = Math.pow(2, (-1 * SplittableLine.ROUGHNESS));
        var displacementScale = Math.pow(baseDisplacementScale, this.generation);
        return this.baseDisplacement * displacementScale;
    };
    SplittableLine.prototype.getGeneration = function () {
        return this.generation;
    };
    SplittableLine.prototype.getBaseDisplacement = function () {
        return this.baseDisplacement;
    };
    SplittableLine.prototype.getSplit = function (verticalBound) {
        var displacementMagnitude = this.nextDisplacementMagnitude();
        var leftPoint = this.a;
        var rightPoint = this.b;
        var midpoint = this.getMidpoint();
        var verticallyDisplacedMidpointA = this.displacePointVertically(midpoint, displacementMagnitude, verticalBound);
        var verticallyDisplacedMidpointB = verticallyDisplacedMidpointA.shallowClone();
        var generation = this.getGeneration() + 1;
        var baseDisplacement = this.getBaseDisplacement();
        var leftSplittableLine = new SplittableLine(leftPoint, verticallyDisplacedMidpointA, generation, baseDisplacement);
        var rightSplittableLine = new SplittableLine(verticallyDisplacedMidpointB, rightPoint, generation, baseDisplacement);
        return new pair_1.Pair(leftSplittableLine, rightSplittableLine);
    };
    SplittableLine.prototype.displacePointVertically = function (p, displaceMagnitude, verticalBound) {
        var y = p.y + this.choose([displaceMagnitude, -displaceMagnitude]);
        y = this.clamp(y, verticalBound.x, verticalBound.y);
        return new pair_1.Pair(p.x, y);
    };
    SplittableLine.prototype.choose = function (choices) {
        return choices[Math.floor(Math.random() * choices.length)];
    };
    SplittableLine.prototype.clamp = function (x, lowerBound, upperBound) {
        return Math.min(upperBound, Math.max(x, lowerBound));
    };
    SplittableLine.prototype.translate = function (x, y) {
        this.a.x += x;
        this.a.y += y;
        this.b.x += x;
        this.b.y += y;
    };
    return SplittableLine;
}());
SplittableLine.ROUGHNESS = 1.3;
exports.SplittableLine = SplittableLine;

},{"./pair":3}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbGlua2VkLWxpc3QudHMiLCJzcmMvbWFpbi50cyIsInNyYy9wYWlyLnRzIiwic3JjL3Njcm9sbGluZy1taWRwb2ludC1kaXNwbGFjZXItbGlua2VkbGlzdC50cyIsInNyYy9zcGxpdHRhYmxlLWxpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDTUE7SUFLRSxjQUFZLElBQVM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUNILFdBQUM7QUFBRCxDQVZBLEFBVUMsSUFBQTtBQVZZLG9CQUFJO0FBWWpCO0lBS0U7UUFDRSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0lBRUQsMkJBQU0sR0FBTjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCx3QkFBRyxHQUFILFVBQUksS0FBYTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsQyxDQUFDO0lBR08sNEJBQU8sR0FBZixVQUFnQixLQUFhO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksSUFBSSxHQUFVLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsT0FBTSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUM7WUFDbkIsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsS0FBSyxDQUFDO1lBQ1IsQ0FBQztZQUNELElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2pCLENBQUMsRUFBRSxDQUFDO1FBQ04sQ0FBQztRQUVELEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2QsTUFBTSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBR0Qsd0JBQUcsR0FBSDtRQUNFLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBRUQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUE7UUFDbkIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN6QixDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUdELHlCQUFJLEdBQUosVUFBSyxDQUFNO1FBQ1QsSUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDaEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFJRCw2QkFBUSxHQUFSO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCw0QkFBTyxHQUFQLFVBQVEsQ0FBVztRQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLElBQUksR0FBVSxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLE9BQU0sSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNqQixDQUFDLEVBQUUsQ0FBQztRQUNOLENBQUM7SUFDSCxDQUFDO0lBRUQsNEJBQU8sR0FBUCxVQUFRLEtBQWEsRUFBRyxLQUFpQjtRQUV2QyxFQUFFLENBQUEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0sS0FBSyxFQUFFLENBQUM7UUFDaEIsQ0FBQztRQUNELEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN0QixNQUFNLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBQ0QsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFDRCxFQUFFLENBQUEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFHRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFHZixJQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQzFCLFNBQVMsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBRTFCLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7WUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQTtZQUM1QixTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztZQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1lBQy9CLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxJQUFJLEdBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV0QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdkIsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDckIsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFFdEIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7WUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7SUFDSCxpQkFBQztBQUFELENBcklBLEFBcUlDLElBQUE7QUFySVksZ0NBQVU7Ozs7QUNmdkIscUdBQWlHO0FBRWpHLElBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBTTtJQUM3QixJQUFNLGlCQUFpQixHQUFZLEdBQUcsQ0FBQztJQUV2QyxJQUFNLENBQUMsR0FBWSxJQUFJLENBQUM7SUFDeEIsSUFBTSxDQUFDLEdBQVksR0FBRyxDQUFDO0lBRXZCLElBQU0sUUFBUSxHQUFXLEdBQUcsQ0FBQztJQUM3QixJQUFNLFFBQVEsR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRSxDQUFDLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFFaEUsSUFBTSxHQUFHLEdBQXNCLElBQUksOEVBQW9DLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTVGLENBQUMsQ0FBQyxLQUFLLEdBQUc7UUFDUixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFbEIsQ0FBQyxDQUFDO0lBRUYsQ0FBQyxDQUFDLElBQUksR0FBRztRQUNQLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRS9CLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNULENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFUixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWpDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBR0YsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQzs7OztBQ3JDN0I7SUFLSSxjQUFZLENBQUksRUFBRSxDQUFJO1FBQ2xCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDO0lBRU0sdUJBQVEsR0FBZjtRQUNJLE1BQU0sQ0FBQyxVQUFRLElBQUksQ0FBQyxDQUFDLFNBQUksSUFBSSxDQUFDLENBQUMsTUFBRyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSwyQkFBWSxHQUFuQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0wsV0FBQztBQUFELENBakJBLEFBaUJDLElBQUE7QUFqQlksb0JBQUk7Ozs7QUNFakIsK0JBQTRCO0FBQzVCLHFEQUFpRDtBQUNqRCw2Q0FBeUM7QUFFekM7SUFxQkUsOENBQVksWUFBb0IsRUFBRSxhQUFxQjtRQUNyRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksV0FBSSxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUVoRCxJQUFNLEtBQUssR0FBZ0IsSUFBSSx3QkFBVSxFQUFFLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFFMUIsSUFBTSxFQUFFLEdBQWlCLElBQUksV0FBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMxQyxJQUFNLEVBQUUsR0FBaUIsSUFBSSxXQUFJLENBQUMsb0NBQW9DLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEcsSUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBTSxDQUFDLEdBQW9CLElBQUksZ0NBQWMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFHZCxJQUFNLG1CQUFtQixHQUFHLFlBQVksR0FBRyxvQ0FBb0MsQ0FBQyxrQkFBa0IsQ0FBQztRQUNuRyxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLG1CQUFtQixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDNUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLENBQUM7UUFHRCxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQUEsb0NBQW9DLENBQUMsS0FBSyxFQUFJLENBQUMsb0NBQW9DLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUM7UUFHaEksR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFHLENBQUMsR0FBRyxvQ0FBb0MsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM5RSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEIsQ0FBQztRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxxREFBTSxHQUFiLFVBQWMsQ0FBSztRQUNqQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQWlCO1lBQ3pDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFHTSxzREFBTyxHQUFkO1FBQ0UsSUFBTSxJQUFJLEdBQW9CLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0QsSUFBTSxlQUFlLEdBQUcsSUFBSSxXQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQU0sYUFBYSxHQUFHLElBQUksV0FBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzlDLG9DQUFvQyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RyxJQUFNLE9BQU8sR0FBRyxJQUFJLGdDQUFjLENBQUMsZUFBZSxFQUFFLGFBQWEsRUFBRSxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0csSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUdNLHVEQUFRLEdBQWY7UUFDRSxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBRWIsSUFBTSxDQUFDLEdBQW9CLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFHeEMsRUFBRSxDQUFBLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9ELElBQU0sS0FBSyxHQUEwQixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDcEUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDMUIsQ0FBQztZQUVELENBQUMsRUFBRSxDQUFDO1FBQ04sQ0FBQztJQUNILENBQUM7SUFHTSxxREFBTSxHQUFiO1FBQ0UsSUFBTSxNQUFNLEdBQUcsb0NBQW9DLENBQUMsa0JBQWtCLENBQUM7UUFDdkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFpQjtZQUMxQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxxREFBTSxHQUFiO1FBQ0UsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBR2xCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBR2hCLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDO1FBRUQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFHTSx1REFBa0IsR0FBekIsVUFBMEIsQ0FBa0I7UUFDMUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxvQ0FBb0MsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFDSCwyQ0FBQztBQUFELENBaEhBLEFBZ0hDO0FBcEdRLDBDQUFLLEdBQVcsQ0FBQyxDQUFDO0FBQ2xCLHVEQUFrQixHQUFXLENBQUMsQ0FBQztBQUMvQixvREFBZSxHQUFXLENBQUMsQ0FBQztBQUM1Qix1REFBa0IsR0FBVyxDQUNsQyxvQ0FBb0MsQ0FBQyxrQkFBa0I7SUFDckQsU0FBQSxvQ0FBb0MsQ0FBQyxLQUFLLEVBQzVDLENBQUMsb0NBQW9DLENBQUMsZUFBZSxHQUFDLENBQUMsQ0FBQyxDQUFBLENBQ3pELENBQUM7QUFuQlMsb0ZBQW9DOzs7O0FDWGpELCtCQUE0QjtBQU01QjtJQU9FLHdCQUFZLENBQWUsRUFBRSxDQUFlLEVBQUUsVUFBa0IsRUFBRSxnQkFBd0I7UUFDeEYsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUMzQyxDQUFDO0lBRU0saUNBQVEsR0FBZjtRQUNFLE1BQU0sQ0FBQyxVQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLFVBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsTUFBRyxDQUFDO0lBQzVELENBQUM7SUFFTSxvQ0FBVyxHQUFsQjtRQUNFLElBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsSUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsSUFBSSxXQUFJLENBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxrREFBeUIsR0FBaEM7UUFDRSxJQUFNLHFCQUFxQixHQUFHLFNBQUEsQ0FBQyxFQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUM7UUFDakUsSUFBTSxpQkFBaUIsR0FBSSxTQUFBLHFCQUFxQixFQUFFLElBQUksQ0FBQyxVQUFVLENBQUEsQ0FBQztRQUNsRSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0lBQ25ELENBQUM7SUFFTSxzQ0FBYSxHQUFwQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFTSw0Q0FBbUIsR0FBMUI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7SUFFTSxpQ0FBUSxHQUFmLFVBQWdCLGFBQTJCO1FBQ3pDLElBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7UUFDL0QsSUFBTSxTQUFTLEdBQWtCLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBTSxVQUFVLEdBQWlCLElBQUksQ0FBQyxDQUFDLENBQUM7UUFHeEMsSUFBTSxRQUFRLEdBQWtCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuRCxJQUFNLDRCQUE0QixHQUFrQixJQUFJLENBQUMsdUJBQXVCLENBQzlFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNsRCxJQUFNLDRCQUE0QixHQUFrQiw0QkFBNEIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUVoRyxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDcEQsSUFBTSxrQkFBa0IsR0FBb0IsSUFBSSxjQUFjLENBQUMsU0FBUyxFQUFFLDRCQUE0QixFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RJLElBQU0sbUJBQW1CLEdBQW9CLElBQUksY0FBYyxDQUFDLDRCQUE0QixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUV4SSxNQUFNLENBQUMsSUFBSSxXQUFJLENBQUMsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU8sZ0RBQXVCLEdBQS9CLFVBQWdDLENBQWUsRUFBRSxpQkFBeUIsRUFBRSxhQUEyQjtRQUNyRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUduRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFcEQsTUFBTSxDQUFDLElBQUksV0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUdPLCtCQUFNLEdBQWQsVUFBZSxPQUFtQjtRQUNoQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFTyw4QkFBSyxHQUFiLFVBQWMsQ0FBUyxFQUFFLFVBQWtCLEVBQUUsVUFBa0I7UUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLGtDQUFTLEdBQWhCLFVBQWlCLENBQVMsRUFBRSxDQUFTO1FBQ25DLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQWpGQSxBQWlGQztBQWhGUSx3QkFBUyxHQUFXLEdBQUcsQ0FBQztBQURwQix3Q0FBYyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKipcbiAqIERvdWJseSBMaW5rZWQgTGlzdCBEYXRhIHN0cnVjdHVyZVxuICovXG5pbXBvcnQge0xpbmV9IGZyb20gJy4vbGluZSc7XG5pbXBvcnQge1BhaXJ9IGZyb20gJy4vcGFpcic7XG5cbmV4cG9ydCBjbGFzcyBOb2RlIHtcbiAgcHVibGljIGRhdGE6IGFueTtcbiAgcHVibGljIHByZXY6IE5vZGU7XG4gIHB1YmxpYyBuZXh0OiBOb2RlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IGFueSkge1xuICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMaW5rZWRMaXN0IHtcbiAgcHJpdmF0ZSBmaXJzdDogTm9kZTtcbiAgcHJpdmF0ZSBsYXN0OiBOb2RlO1xuICBwcml2YXRlIGxlbmd0aF86IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmZpcnN0ID0gbnVsbDtcbiAgICB0aGlzLmxhc3QgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoXyA9IDA7XG4gIH1cblxuICBsZW5ndGgoKSA6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXztcbiAgfVxuXG4gIGdldChpbmRleDogbnVtYmVyKSA6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZShpbmRleCkuZGF0YTtcbiAgfVxuXG4gIC8vIFRPRE8oYXV0b21hdHdvbik6IExvb3AgYmFja3dhcmQgZnJvbSBlbmQgaWYgY2xvc2VyIHRvIGluZGV4LlxuICBwcml2YXRlIGdldE5vZGUoaW5kZXg6IG51bWJlcikgOiBOb2RlIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGN1cnIgOiBOb2RlID0gdGhpcy5maXJzdDtcbiAgICB3aGlsZShjdXJyICE9IG51bGwpIHtcbiAgICAgIGlmKGkgPT0gaW5kZXgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjdXJyID0gY3Vyci5uZXh0O1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIGlmKGkgIT0gaW5kZXgpIHtcbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGluZGV4Jyk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyO1xuICB9XG5cbiAgLy8gVGhyb3dzIG51bGwgcG9pbnRlciBpZiBubyBlbGVtZW50IHRvIHBvcFxuICBwb3AoKSA6IExpbmUge1xuICAgIGlmKCEodGhpcy5maXJzdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdGhpbmcgdG8gcG9wXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmZpcnN0O1xuICAgIGlmKG5vZGUubmV4dCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmZpcnN0ID0gbnVsbFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZpcnN0ID0gbm9kZS5uZXh0O1xuICAgICAgdGhpcy5maXJzdC5wcmV2ID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5sZW5ndGhfLS07XG4gICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgfVxuXG4gIC8vIGJlIHN0cmljdGVyIGFib3V0IHRoZSB0eXBlIHRvIGU6IExpbmVgXG4gIHB1c2goZTogYW55KSB7XG4gICAgY29uc3QgbiA9IG5ldyBOb2RlKGUpO1xuICAgIGlmKHRoaXMubGFzdCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmZpcnN0ID0gbjtcbiAgICAgIHRoaXMubGFzdCA9IG47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGFzdC5uZXh0ID0gbjtcbiAgICAgIG4ucHJldiA9IHRoaXMubGFzdDtcbiAgICAgIHRoaXMubGFzdCA9IG47XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGhfKys7XG4gIH1cblxuICAvLyBUT0RPKGF1dG9tYXR3b24pOiBhZGQgcGVla0ZpcnN0XG5cbiAgcGVla0xhc3QoKSA6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMubGFzdC5kYXRhO1xuICB9XG5cbiAgZm9yRWFjaChmOiBGdW5jdGlvbikgOiB2b2lkIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGN1cnIgOiBOb2RlID0gdGhpcy5maXJzdDtcbiAgICB3aGlsZShjdXJyICE9IG51bGwpIHtcbiAgICAgIGYoY3Vyci5kYXRhKTtcbiAgICAgIGN1cnIgPSBjdXJyLm5leHQ7XG4gICAgICBpKys7XG4gICAgfVxuICB9XG5cbiAgc3BsaXRBdChpbmRleDogbnVtYmVyLCAgc3BsaXQ6IFBhaXI8TGluZT4pIHtcbiAgICAvLyBUT0RPKGF1dG9tYXR3b24pOiBEaXNhYmxlIHRoZXNlIGRlZmVuc2l2ZSBjaGVja3MgZm9yIHBlcmZvcm1hbmNlXG4gICAgaWYoaW5kZXggPCAwKSB7XG4gICAgICB0aHJvdyBFcnJvcigpO1xuICAgIH1cbiAgICBpZih0aGlzLmZpcnN0ID09IG51bGwpIHtcbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIGluZGV4Jyk7XG4gICAgfVxuICAgIGlmKHRoaXMuZmlyc3QubmV4dCA9PSBudWxsICYmIGluZGV4ICE9IDApIHtcbiAgICAgIHRocm93IEVycm9yKCdJbmRleCBETkUnKTtcbiAgICB9XG4gICAgaWYoaW5kZXggPj0gdGhpcy5sZW5ndGgoKSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0luZGV4IG91dCBib3VuZHMnKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUmVwbGFjZSBvbmUgZWxlbWVudCB3aXRoIHR3b1xuICAgIHRoaXMubGVuZ3RoXysrO1xuXG4gICAgLy8gTGluayB0aGUgZWxlbWVudHNcbiAgICBjb25zdCBsZWZ0Tm9kZSA9IG5ldyBOb2RlKHNwbGl0LngpO1xuICAgIGNvbnN0IHJpZ2h0Tm9kZSA9IG5ldyBOb2RlKHNwbGl0LnkpO1xuICAgIGxlZnROb2RlLm5leHQgPSByaWdodE5vZGU7XG4gICAgcmlnaHROb2RlLnByZXYgPSBsZWZ0Tm9kZTtcblxuICAgIGlmKHRoaXMuZmlyc3QubmV4dCA9PSBudWxsKSB7IC8vIDEgZWxlbWVudFxuICAgICAgdGhpcy5maXJzdCA9IGxlZnROb2RlO1xuICAgICAgdGhpcy5sYXN0ID0gcmlnaHROb2RlO1xuICAgIH0gZWxzZSBpZihpbmRleCA9PSAwKSB7IC8vIEZpcnN0IEVsZW1lbnRcbiAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmZpcnN0Lm5leHRcbiAgICAgIHJpZ2h0Tm9kZS5uZXh0ID0gbmV4dDtcbiAgICAgIHRoaXMuZmlyc3QgPSBsZWZ0Tm9kZTtcbiAgICAgIG5leHQucHJldiA9IHJpZ2h0Tm9kZTtcbiAgICB9IGVsc2UgaWYoaW5kZXggPT0gdGhpcy5sZW5ndGgoKSAtIDIpIHsgLy8gbGFzdCBlbGVtZW50IFxuICAgICAgdGhpcy5sYXN0LnByZXYubmV4dCA9IGxlZnROb2RlO1xuICAgICAgbGVmdE5vZGUucHJldiA9IHRoaXMubGFzdC5wcmV2OyAgICAgIFxuICAgICAgdGhpcy5sYXN0ID0gcmlnaHROb2RlO1xuICAgIH0gZWxzZSB7IC8vIG1pZGRsZSBjYXNlXG4gICAgICBsZXQgY3VyciA6IE5vZGUgPSB0aGlzLmdldE5vZGUoaW5kZXgpO1xuICAgICAgXG4gICAgICBjb25zdCBwcmV2ID0gY3Vyci5wcmV2O1xuICAgICAgY29uc3QgbmV4dCA9IGN1cnIubmV4dDtcbiAgICAgIGxlZnROb2RlLnByZXYgPSBwcmV2O1xuICAgICAgcmlnaHROb2RlLm5leHQgPSBuZXh0O1xuXG4gICAgICBwcmV2Lm5leHQgPSBsZWZ0Tm9kZTsgICAgICAgIFxuICAgICAgbmV4dC5wcmV2ID0gcmlnaHROb2RlO1xuICAgIH1cbiAgfVxufSIsIi8vLzxyZWZlcmVuY2UgcGF0aD1cInA1LmQudHNcIiAvPlxuXG5pbXBvcnQge1RlcnJhaW5HZW5lcmF0b3J9IGZyb20gJy4vdGVycmFpbi1nZW5lcmF0b3InO1xuaW1wb3J0IHsgU2Nyb2xsaW5nTWlkcG9pbnREaXNwbGFjZXJMaW5rZWRMaXN0IH0gZnJvbSAnLi9zY3JvbGxpbmctbWlkcG9pbnQtZGlzcGxhY2VyLWxpbmtlZGxpc3QnO1xuXG5jb25zdCBza2V0Y2ggPSBmdW5jdGlvbiAocCA6IHA1KSB7XG4gIGNvbnN0IE1BUkdJTl9QRVJDRU5UQUdFIDogbnVtYmVyID0gLjE1O1xuICBcbiAgY29uc3QgVyA6IG51bWJlciA9IDE0MDA7XG4gIGNvbnN0IEggOiBudW1iZXIgPSA0MDA7XG5cbiAgY29uc3QgbWluaW11bVc6IG51bWJlciA9IDgwMDtcbiAgY29uc3QgbWF4aW11bUg6IG51bWJlciA9IE1hdGgucm91bmQoSCAqKDEgLSBNQVJHSU5fUEVSQ0VOVEFHRSkpO1xuXG4gIGNvbnN0IG1kcCA6IFRlcnJhaW5HZW5lcmF0b3IgPSBuZXcgU2Nyb2xsaW5nTWlkcG9pbnREaXNwbGFjZXJMaW5rZWRMaXN0KG1pbmltdW1XLCBtYXhpbXVtSCk7XG5cbiAgcC5zZXR1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwLmNyZWF0ZUNhbnZhcyhXLCBIKTtcbiAgICBwLnN0cm9rZVdlaWdodCgyKTtcbiAgICBwLmZyYW1lUmF0ZSgyMCk7XG4gICAgXG4gIH07XG5cbiAgcC5kcmF3ID0gZnVuY3Rpb24oKSB7XG4gICAgcC5iYWNrZ3JvdW5kKHAuY29sb3IoJ2JsYWNrJykpO1xuICAgIFxuICAgIHAucHVzaCgpO1xuICAgIHAudHJhbnNsYXRlKDAsIE1BUkdJTl9QRVJDRU5UQUdFICogSCAvIDIpO1xuICAgIHAuc3Ryb2tlKHAuY29sb3IoOTgsIDIwMywgMTU3KSk7XG4gICAgbWRwLnVwZGF0ZSgpOyBcbiAgICBtZHAucmVuZGVyKHApO1xuICAgIHAucG9wKCk7XG5cbiAgICBwLnN0cm9rZShwLmNvbG9yKCd3aGl0ZScpKTtcbiAgICBwLmxpbmUobWluaW11bVcsIDAsIG1pbmltdW1XLCBIKTtcblxuICAgIHAuZmlsbChwLmNvbG9yKDIxMSwgMjQ1LCAyMzUsIDkwKSk7XG4gICAgcC5yZWN0KG1pbmltdW1XLCAwLCBXLCBIKTtcbiAgfTtcbn07XG5cbi8vIFRPRE8oZnJlZWZvb2QpOiBmaXggZGF0YS5qc29uIHRvIGhhdmUgbW9yZSBleHBsaWNpdCB0eXBlIFxubmV3IHA1KHNrZXRjaCwgZmFsc2UsIGZhbHNlKTsiLCIvKipcbiAqIGNsYXNzIHRvIHJlcHJlc2VudCBwYWlyIG9mIFRzXG4gKlxuICovXG5cbmV4cG9ydCBjbGFzcyBQYWlyPFQ+IHtcbiAgICAvLyBUT09EKGF1dG9tYXR3b24pOiBjaGFuZ2UgeCwgeSAtPiBfLjEsIF8uMlxuICAgIHB1YmxpYyB4IDogVDtcbiAgICBwdWJsaWMgeSA6IFQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih4OiBULCB5OiBUKSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuXG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFBhaXIoJHt0aGlzLnh9LCR7dGhpcy55fSlgO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgc2hhbGxvd0Nsb25lKCkgOiBQYWlyPFQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYWlyKHRoaXMueCwgdGhpcy55KTtcbiAgICB9XG59IiwiLy8vPHJlZmVyZW5jZSBwYXRoPVwicDUuZC50c1wiIC8+XG4vKipcbiAqIENsYXNzIHRvIG1hbmFnZSBzdGF0ZSBvZiBzY3JvbGxpbmcgdGVycmFpbiB3aXRoIGRvdWJseS1saW5rZWQgbGlzdCBxdWV1ZSB0aGF0IHByb2dyZXNzaXZlbHkgYnVmZmVycyBtb3JlIFxuICogbGluZXMgXG5cbiAqL1xuXG5pbXBvcnQge1BhaXJ9IGZyb20gJy4vcGFpcic7XG5pbXBvcnQge1NwbGl0dGFibGVMaW5lfSBmcm9tICcuL3NwbGl0dGFibGUtbGluZSc7XG5pbXBvcnQge0xpbmtlZExpc3R9IGZyb20gJy4vbGlua2VkLWxpc3QnO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsaW5nTWlkcG9pbnREaXNwbGFjZXJMaW5rZWRMaXN0IHtcblxuICAvLyBUT0RPKGF1dG9tYXR3b24pOiB0aGlzIGlzIHByb2JhYmx5IG1vcmUgZWZmaWNpZW50bHkgcmVwcmVzZW50ZWQgYXMgc2VxdWVuY2VcbiAgLy8gb2YgcG9pbnRzLiBCdXQgZWFzaWVyIHRvIGltcGxlbWVudCB3aXRoIFNwbGl0dGFibGVMaW5lcyBmb3Igbm93XG4gIHByaXZhdGUgbGluZVNlZ21lbnRzOiBMaW5rZWRMaXN0O1xuICBwcml2YXRlIGJhc2VEaXNwbGFjZW1lbnQ6IG51bWJlcjtcbiAgcHJpdmF0ZSB2ZXJ0aWNhbEJvdW5kOiBQYWlyPG51bWJlcj47XG5cbiAgcHJpdmF0ZSBpdGVyYXRpb25zOiBudW1iZXI7XG4gIHByaXZhdGUgZW5xdWV1ZUludGVydmFsOiBudW1iZXI7XG5cbiAgLy8gTnVtYmVyIG9mIHBhcnRzIHdlIHBhcnRpdGlvbiBlYWNoIGxpbmUgaW50b1xuICBzdGF0aWMgUE9XRVI6IG51bWJlciA9IDI7XG4gIHN0YXRpYyBNSU5JTVVNX0xJTkVfV0lEVEg6IG51bWJlciA9IDI7XG4gIHN0YXRpYyBNQVhfR0VORVJBVElPTlM6IG51bWJlciA9IDc7XG4gIHN0YXRpYyBJTklUSUFMX0xJTkVfV0lEVEg6IG51bWJlciA9IChcbiAgICBTY3JvbGxpbmdNaWRwb2ludERpc3BsYWNlckxpbmtlZExpc3QuTUlOSU1VTV9MSU5FX1dJRFRIICpcbiAgICAgIFNjcm9sbGluZ01pZHBvaW50RGlzcGxhY2VyTGlua2VkTGlzdC5QT1dFUiAqKlxuICAgIChTY3JvbGxpbmdNaWRwb2ludERpc3BsYWNlckxpbmtlZExpc3QuTUFYX0dFTkVSQVRJT05TLTEpXG4gICk7XG5cbiAgY29uc3RydWN0b3IobWluaW11bVdpZHRoOiBudW1iZXIsIG1heGltdW1IZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMudmVydGljYWxCb3VuZCA9IG5ldyBQYWlyKDAsIG1heGltdW1IZWlnaHQpO1xuXG4gICAgY29uc3QgbGluZXMgOiBMaW5rZWRMaXN0ID0gbmV3IExpbmtlZExpc3QoKTtcbiAgICB0aGlzLmxpbmVTZWdtZW50cyA9IGxpbmVzO1xuXG4gICAgY29uc3QgcDEgOiBQYWlyPG51bWJlcj49IG5ldyBQYWlyKDAsIDE1MCk7XG4gICAgY29uc3QgcDIgOiBQYWlyPG51bWJlcj49IG5ldyBQYWlyKFNjcm9sbGluZ01pZHBvaW50RGlzcGxhY2VyTGlua2VkTGlzdC5JTklUSUFMX0xJTkVfV0lEVEgsIDI1MCk7XG4gICAgY29uc3QgYmFzZURpc3BsYWNlbWVudCA9IHAxLnkgLSBwMi55O1xuICAgIGNvbnN0IGwgOiBTcGxpdHRhYmxlTGluZSA9IG5ldyBTcGxpdHRhYmxlTGluZShwMSwgcDIsIDAsICBiYXNlRGlzcGxhY2VtZW50KTtcbiAgICBsaW5lcy5wdXNoKGwpO1xuXG4gICAgLy8gQWRkIGVub3VnaCBpbml0aWFsIGxpbmUgc2VnbWVudHMgc28gdGhlcmUgaXMgYWx3YXlzIGVub3VnaCBjb21wbGV0ZWx5IHNwbGl0IGxpbmUgc2VnbWVudHMgaW4gdmlld2FibGUgYXJlYVxuICAgIGNvbnN0IG51bUJhc2VMaW5lU2VnbWVudHMgPSBtaW5pbXVtV2lkdGggLyBTY3JvbGxpbmdNaWRwb2ludERpc3BsYWNlckxpbmtlZExpc3QuSU5JVElBTF9MSU5FX1dJRFRIO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBudW1CYXNlTGluZVNlZ21lbnRzOyBpKyspIHtcbiAgICAgIHRoaXMuZW5xdWV1ZSgpO1xuICAgIH1cbiAgICBcbiAgICAvLyBOdW1iZXIgb2YgaXRlcnRpb25zIGJlZm9yZSBlbnF1ZXVlXG4gICAgdGhpcy5lbnF1ZXVlSW50ZXJ2YWwgPSBTY3JvbGxpbmdNaWRwb2ludERpc3BsYWNlckxpbmtlZExpc3QuUE9XRVIgKiogKFNjcm9sbGluZ01pZHBvaW50RGlzcGxhY2VyTGlua2VkTGlzdC5NQVhfR0VORVJBVElPTlMgLSAxKTtcblxuICAgIC8vIEVuc3VyZSBhbGwgbGluZSBzZWdtZW50cyBvcmlnaW5hbGx5IGRpc3BsYWNlZCAvIHNwbGl0IGFzIG11Y2ggYXMgcG9zc2libGVcbiAgICBmb3IobGV0IGkgPSAwIDsgaSA8IFNjcm9sbGluZ01pZHBvaW50RGlzcGxhY2VyTGlua2VkTGlzdC5NQVhfR0VORVJBVElPTlM7IGkrKykge1xuICAgICAgdGhpcy5kaXNwbGFjZSgpO1xuICAgIH1cblxuICAgIHRoaXMuaXRlcmF0aW9ucyA9IDA7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKHA6IHA1KSB7XG4gICAgdGhpcy5saW5lU2VnbWVudHMuZm9yRWFjaCgobDogU3BsaXR0YWJsZUxpbmUpID0+IHtcbiAgICAgICBwLmxpbmUobC5hLngsIGwuYS55LCBsLmIueCwgbC5iLnkpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQWRkIGEgdW5kaXNwbGFjZWQgbGluZSBzZWdtZW50IHRoYXQgc3RhcnRzIGZyb20gcHJldmlvdXMgbGluZSBzZWdtZW50XG4gIHB1YmxpYyBlbnF1ZXVlKCkge1xuICAgIGNvbnN0IGxhc3QgOiBTcGxpdHRhYmxlTGluZSA9IHRoaXMubGluZVNlZ21lbnRzLnBlZWtMYXN0KCk7XG4gICAgY29uc3QgYmVnaW5Db29yZGluYXRlID0gbmV3IFBhaXIobGFzdC5iLnggKyAwLCBsYXN0LmIueSArIDApOyBcbiAgICBjb25zdCBlbmRDb29yZGluYXRlID0gbmV3IFBhaXIoYmVnaW5Db29yZGluYXRlLnggK1xuICAgICAgU2Nyb2xsaW5nTWlkcG9pbnREaXNwbGFjZXJMaW5rZWRMaXN0LklOSVRJQUxfTElORV9XSURUSCwgTWF0aC5mbG9vcih0aGlzLnZlcnRpY2FsQm91bmQueSAqIE1hdGgucmFuZG9tKCkpKTtcbiAgICBjb25zdCBuZXdMaW5lID0gbmV3IFNwbGl0dGFibGVMaW5lKGJlZ2luQ29vcmRpbmF0ZSwgZW5kQ29vcmRpbmF0ZSwgMCwgYmVnaW5Db29yZGluYXRlLnkgLSBlbmRDb29yZGluYXRlLnkpO1xuICAgIHRoaXMubGluZVNlZ21lbnRzLnB1c2gobmV3TGluZSk7XG4gIH1cblxuICAvLyBQZXJmb3JtIGEgc2luZ2xlIHBhc3Mgb2YgbWlkcG9pbnQgZGlzcGxhY2VtZW50IG92ZXIgZXZlcnkgbGluZSBzZWdtZW50XG4gIHB1YmxpYyBkaXNwbGFjZSgpIHtcbiAgICBjb25zdCBsaW5lcyA9IHRoaXMubGluZVNlZ21lbnRzO1xuICAgIGxldCBpID0gdGhpcy5saW5lU2VnbWVudHMubGVuZ3RoKCkgLSAxO1xuICAgIHdoaWxlKGkgPj0gMCkge1xuICAgICAgLy8gVE9ETyhhdXRvbWF0d29uKTogaW5zdGVhZCBvZiB1c2luZyBnZXQuIGxvb3Agb3ZlciB0aGUgbGlzdCBpbiBhIHNpbmdsZSBwYXNzLiBhZGQgYSBpdGVyYXRvciB0byBkb3VibHkgTGlua2VkTGlzdFxuICAgICAgY29uc3QgbCA6IFNwbGl0dGFibGVMaW5lID0gbGluZXMuZ2V0KGkpO1xuICAgICAgLy8gVE9ETyhhdXRvbWF0d29uKTogY29uc2lkZXIgZHJvcHBpbmcgdGhpcyBpZiB3ZSBhcmUgdXNpbmcgc2V0IG9mIHBvaW50cyxcbiAgICAgIC8vIGluc3RlYWQgb2YgbGluZSBzZWdtZW50cywgd2hlcmUgd2UgY2FuIGNvbXBhcmUgYWRqYWNlbnQgcGFpcnNcbiAgICAgIGlmKCFTY3JvbGxpbmdNaWRwb2ludERpc3BsYWNlckxpbmtlZExpc3Quc2tpcFNwbGl0dGFibGVMaW5lKGwpKSB7XG4gICAgICAgIGNvbnN0IHNwbGl0IDogUGFpcjxTcGxpdHRhYmxlTGluZT4gPSBsLmdldFNwbGl0KHRoaXMudmVydGljYWxCb3VuZCk7XG4gICAgICAgIGxpbmVzLnNwbGl0QXQoaSwgc3BsaXQpO1xuICAgICAgfVxuICAgXG4gICAgICBpLS07XG4gICAgfVxuICB9XG5cbiAgLy8gU2hpZnRzIGFsbCB0aGUgbGluZSBzZWdtZW50cyBob3Jpem9udGFsbHlcbiAgcHVibGljIHNjcm9sbCgpIHtcbiAgICBjb25zdCBkZWx0YVggPSBTY3JvbGxpbmdNaWRwb2ludERpc3BsYWNlckxpbmtlZExpc3QuTUlOSU1VTV9MSU5FX1dJRFRIO1xuICAgIHRoaXMubGluZVNlZ21lbnRzLmZvckVhY2goKGw6IFNwbGl0dGFibGVMaW5lKSA9PiB7XG4gICAgICBsLnRyYW5zbGF0ZSgtMSpkZWx0YVgsIDApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZSgpIHtcbiAgICB0aGlzLml0ZXJhdGlvbnMrKztcbiAgICAgIFxuICAgIC8vIERlcXVldWUgZWFybGllc3QgbGluZSBzZWdtZW50c1xuICAgIHRoaXMubGluZVNlZ21lbnRzLnBvcCgpO1xuXG4gICAgdGhpcy5kaXNwbGFjZSgpO1xuXG4gICAgLy8gRW5xdWV1ZSBuZXcgdW5kaXNwbGFjZWQgbGluZVxuICAgIGlmKHRoaXMuaXRlcmF0aW9ucyAlIHRoaXMuZW5xdWV1ZUludGVydmFsID09IDApIHtcbiAgICAgICAgdGhpcy5lbnF1ZXVlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGwoKTtcbiAgfVxuXG4gIC8vIENvbmRpdGlvbiB0byBzdG9wIGxvb3BpbmdcbiAgc3RhdGljIHNraXBTcGxpdHRhYmxlTGluZShsIDogU3BsaXR0YWJsZUxpbmUpIDogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGwuZ2V0R2VuZXJhdGlvbigpID49IFNjcm9sbGluZ01pZHBvaW50RGlzcGxhY2VyTGlua2VkTGlzdC5NQVhfR0VORVJBVElPTlMgLSAxO1xuICB9XG59IiwiaW1wb3J0IHtQYWlyfSBmcm9tICcuL3BhaXInO1xuXG4vKipcbiAqIGNsYXNzIHRvIHJlcHJlc2VudCBMaW5lIHNlZ21lbnQgd2l0aCBhZGRpdGlvbmFsIGRhdGEgZm9yIG1pZHBvaW50IGRpc3BsYWNlbWVudCBzcGxpdHRpbmdcbiAqL1xuXG5leHBvcnQgY2xhc3MgU3BsaXR0YWJsZUxpbmUge1xuICBzdGF0aWMgUk9VR0hORVNTOiBudW1iZXIgPSAxLjM7XG4gIHB1YmxpYyBhOiBQYWlyPG51bWJlcj47XG4gIHB1YmxpYyBiOiBQYWlyPG51bWJlcj47XG4gIHByaXZhdGUgZ2VuZXJhdGlvbjogbnVtYmVyO1xuICBwcml2YXRlIGJhc2VEaXNwbGFjZW1lbnQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihhOiBQYWlyPG51bWJlcj4sIGI6IFBhaXI8bnVtYmVyPiwgZ2VuZXJhdGlvbjogbnVtYmVyLCBiYXNlRGlzcGxhY2VtZW50OiBudW1iZXIpIHtcbiAgICB0aGlzLmEgPSBhO1xuICAgIHRoaXMuYiA9IGI7XG4gICAgdGhpcy5nZW5lcmF0aW9uID0gZ2VuZXJhdGlvbjtcbiAgICB0aGlzLmJhc2VEaXNwbGFjZW1lbnQgPSBiYXNlRGlzcGxhY2VtZW50O1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgTGluZSgke3RoaXMuYS50b1N0cmluZygpfS0+JHt0aGlzLmIudG9TdHJpbmcoKX0pYDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNaWRwb2ludCgpIDogUGFpcjxudW1iZXI+IHtcbiAgICBjb25zdCB4ID0gKHRoaXMuYi54ICsgdGhpcy5hLngpIC8gMjtcbiAgICBjb25zdCB5ID0gKHRoaXMuYi55ICsgdGhpcy5hLnkpIC8gMjtcbiAgICByZXR1cm4gbmV3IFBhaXI8bnVtYmVyPih4LCB5KTtcbiAgfVxuXG4gIHB1YmxpYyBuZXh0RGlzcGxhY2VtZW50TWFnbml0dWRlKCkgOiBudW1iZXIge1xuICAgIGNvbnN0IGJhc2VEaXNwbGFjZW1lbnRTY2FsZSA9IDIgKiogKC0xKlNwbGl0dGFibGVMaW5lLlJPVUdITkVTUyk7XG4gICAgY29uc3QgZGlzcGxhY2VtZW50U2NhbGUgPSAgYmFzZURpc3BsYWNlbWVudFNjYWxlKip0aGlzLmdlbmVyYXRpb247XG4gICAgcmV0dXJuIHRoaXMuYmFzZURpc3BsYWNlbWVudCAqIGRpc3BsYWNlbWVudFNjYWxlO1xuICB9XG5cbiAgcHVibGljIGdldEdlbmVyYXRpb24oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZW5lcmF0aW9uO1xuICB9XG5cbiAgcHVibGljIGdldEJhc2VEaXNwbGFjZW1lbnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5iYXNlRGlzcGxhY2VtZW50O1xuICB9XG5cbiAgcHVibGljIGdldFNwbGl0KHZlcnRpY2FsQm91bmQ6IFBhaXI8bnVtYmVyPik6IFBhaXI8U3BsaXR0YWJsZUxpbmU+IHtcbiAgICBjb25zdCBkaXNwbGFjZW1lbnRNYWduaXR1ZGUgPSB0aGlzLm5leHREaXNwbGFjZW1lbnRNYWduaXR1ZGUoKTtcbiAgICBjb25zdCBsZWZ0UG9pbnQgOiBQYWlyPG51bWJlcj4gPSB0aGlzLmE7XG4gICAgY29uc3QgcmlnaHRQb2ludCA6IFBhaXI8bnVtYmVyPj0gdGhpcy5iO1xuXG4gICAgLy8gQ29tcHV0ZSBkaXNwbGFjZWQgbWlkcG9pbnRcbiAgICBjb25zdCBtaWRwb2ludCA6IFBhaXI8bnVtYmVyPiA9IHRoaXMuZ2V0TWlkcG9pbnQoKTtcbiAgICBjb25zdCB2ZXJ0aWNhbGx5RGlzcGxhY2VkTWlkcG9pbnRBIDogUGFpcjxudW1iZXI+ID0gdGhpcy5kaXNwbGFjZVBvaW50VmVydGljYWxseShcbiAgICAgIG1pZHBvaW50LCBkaXNwbGFjZW1lbnRNYWduaXR1ZGUsIHZlcnRpY2FsQm91bmQpO1xuICAgIGNvbnN0IHZlcnRpY2FsbHlEaXNwbGFjZWRNaWRwb2ludEIgOiBQYWlyPG51bWJlcj4gPSB2ZXJ0aWNhbGx5RGlzcGxhY2VkTWlkcG9pbnRBLnNoYWxsb3dDbG9uZSgpO1xuXG4gICAgY29uc3QgZ2VuZXJhdGlvbiA9IHRoaXMuZ2V0R2VuZXJhdGlvbigpICsgMTtcbiAgICBjb25zdCBiYXNlRGlzcGxhY2VtZW50ID0gdGhpcy5nZXRCYXNlRGlzcGxhY2VtZW50KCk7XG4gICAgY29uc3QgbGVmdFNwbGl0dGFibGVMaW5lIDogU3BsaXR0YWJsZUxpbmUgPSBuZXcgU3BsaXR0YWJsZUxpbmUobGVmdFBvaW50LCB2ZXJ0aWNhbGx5RGlzcGxhY2VkTWlkcG9pbnRBLCBnZW5lcmF0aW9uLCBiYXNlRGlzcGxhY2VtZW50KTtcbiAgICBjb25zdCByaWdodFNwbGl0dGFibGVMaW5lIDogU3BsaXR0YWJsZUxpbmUgPSBuZXcgU3BsaXR0YWJsZUxpbmUodmVydGljYWxseURpc3BsYWNlZE1pZHBvaW50QiwgcmlnaHRQb2ludCwgZ2VuZXJhdGlvbiwgYmFzZURpc3BsYWNlbWVudCk7XG5cbiAgICByZXR1cm4gbmV3IFBhaXIobGVmdFNwbGl0dGFibGVMaW5lLCByaWdodFNwbGl0dGFibGVMaW5lKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGxhY2VQb2ludFZlcnRpY2FsbHkocDogUGFpcjxudW1iZXI+LCBkaXNwbGFjZU1hZ25pdHVkZTogbnVtYmVyLCB2ZXJ0aWNhbEJvdW5kOiBQYWlyPG51bWJlcj4pIDogUGFpcjxudW1iZXI+e1xuICAgIGxldCB5ID0gcC55ICsgdGhpcy5jaG9vc2UoW2Rpc3BsYWNlTWFnbml0dWRlLCAtZGlzcGxhY2VNYWduaXR1ZGVdKTtcbiAgICBcbiAgICAvLyBCb3VuZCB0aGUgdmFsdWUgdG8gd2l0aGluIHdpbmRvd1xuICAgIHkgPSB0aGlzLmNsYW1wKHksIHZlcnRpY2FsQm91bmQueCwgdmVydGljYWxCb3VuZC55KTtcblxuICAgIHJldHVybiBuZXcgUGFpcihwLngsIHkpO1xuICB9XG5cbiAgICAvLyBQcml2YXRlIHN0YXRpYyBmaW5hbDogbW92ZSBpbnRvIHV0aWxpdHkgb3IgZ2xvYmFsLmQudHNcbiAgcHJpdmF0ZSBjaG9vc2UoY2hvaWNlczogQXJyYXk8YW55Pikge1xuICAgIHJldHVybiBjaG9pY2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNob2ljZXMubGVuZ3RoKV07XG4gIH1cblxuICBwcml2YXRlIGNsYW1wKHg6IG51bWJlciwgbG93ZXJCb3VuZDogbnVtYmVyLCB1cHBlckJvdW5kOiBudW1iZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXJCb3VuZCwgTWF0aC5tYXgoeCwgbG93ZXJCb3VuZCkpO1xuICB9XG5cbiAgcHVibGljIHRyYW5zbGF0ZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMuYS54ICs9IHg7XG4gICAgdGhpcy5hLnkgKz0geTtcbiAgICB0aGlzLmIueCArPSB4O1xuICAgIHRoaXMuYi55ICs9IHk7XG4gIH1cbn0iXX0=