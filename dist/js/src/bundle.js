(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Node = (function () {
    function Node(data) {
        this.prev = null;
        this.next = null;
        this.data = data;
    }
    return Node;
}());
exports.Node = Node;
var LinkedList = (function () {
    function LinkedList() {
        this.first = null;
        this.last = null;
        this.length_ = 0;
    }
    LinkedList.prototype.length = function () {
        return this.length_;
    };
    LinkedList.prototype.get = function (index) {
        return this.getNode(index).data;
    };
    LinkedList.prototype.getNode = function (index) {
        var i = 0;
        var curr = this.first;
        while (curr != null) {
            if (i == index) {
                break;
            }
            curr = curr.next;
            i++;
        }
        if (i != index) {
            throw Error('Invalid index');
        }
        return curr;
    };
    LinkedList.prototype.pop = function () {
        if (!(this.first)) {
            throw new Error("Nothing to pop");
        }
        var node = this.first;
        if (node.next == null) {
            this.first = null;
        }
        else {
            this.first = node.next;
            this.first.prev = null;
        }
        this.length_--;
        return node.data;
    };
    LinkedList.prototype.push = function (e) {
        var n = new Node(e);
        if (this.last == null) {
            this.first = n;
            this.last = n;
        }
        else {
            this.last.next = n;
            n.prev = this.last;
            this.last = n;
        }
        this.length_++;
    };
    LinkedList.prototype.peekLast = function () {
        return this.last.data;
    };
    LinkedList.prototype.forEach = function (f) {
        var i = 0;
        var curr = this.first;
        while (curr != null) {
            f(curr.data);
            curr = curr.next;
            i++;
        }
    };
    LinkedList.prototype.splitAt = function (index, split) {
        if (index < 0) {
            throw Error();
        }
        if (this.first == null) {
            throw Error('Invalid index');
        }
        if (this.first.next == null && index != 0) {
            throw Error('Index DNE');
        }
        if (index >= this.length()) {
            throw Error('Index out bounds');
        }
        this.length_++;
        var leftNode = new Node(split.x);
        var rightNode = new Node(split.y);
        leftNode.next = rightNode;
        rightNode.prev = leftNode;
        if (this.first.next == null) {
            this.first = leftNode;
            this.last = rightNode;
        }
        else if (index == 0) {
            var next = this.first.next;
            rightNode.next = next;
            this.first = leftNode;
            next.prev = rightNode;
        }
        else if (index == this.length() - 2) {
            this.last.prev.next = leftNode;
            leftNode.prev = this.last.prev;
            this.last = rightNode;
        }
        else {
            var curr = this.getNode(index);
            var prev = curr.prev;
            var next = curr.next;
            leftNode.prev = prev;
            rightNode.next = next;
            prev.next = leftNode;
            next.prev = rightNode;
        }
    };
    return LinkedList;
}());
exports.LinkedList = LinkedList;

},{}],2:[function(require,module,exports){
"use strict";
var scrolling_midpoint_displacer_linkedlist_1 = require("./scrolling-midpoint-displacer-linkedlist");
var sketch = function (p) {
    var MARGIN_PERCENTAGE = .15;
    var W = 2000;
    var H = 400;
    var minimumW = 640;
    var maximumH = Math.round(H * (1 - MARGIN_PERCENTAGE));
    var mdp = new scrolling_midpoint_displacer_linkedlist_1.ScrollingMidpointDisplacerLinkedList(minimumW, maximumH);
    p.setup = function () {
        p.createCanvas(W, H);
        p.strokeWeight(2);
        p.frameRate(20);
    };
    p.draw = function () {
        p.background(p.color('black'));
        p.push();
        p.translate(0, MARGIN_PERCENTAGE * H / 2);
        p.stroke(p.color(98, 203, 157));
        mdp.update();
        mdp.render(p);
        p.pop();
        p.stroke(p.color('white'));
        p.line(minimumW, 0, minimumW, H);
    };
};
new p5(sketch, false, false);

},{"./scrolling-midpoint-displacer-linkedlist":4}],3:[function(require,module,exports){
"use strict";
var Pair = (function () {
    function Pair(x, y) {
        this.x = x;
        this.y = y;
    }
    Pair.prototype.toString = function () {
        return "Pair(" + this.x + "," + this.y + ")";
    };
    Pair.prototype.shallowClone = function () {
        return new Pair(this.x, this.y);
    };
    return Pair;
}());
exports.Pair = Pair;

},{}],4:[function(require,module,exports){
"use strict";
var pair_1 = require("./pair");
var splittable_line_1 = require("./splittable-line");
var linked_list_1 = require("./linked-list");
var ScrollingMidpointDisplacerLinkedList = (function () {
    function ScrollingMidpointDisplacerLinkedList(minimumWidth, maximumHeight) {
        this.verticalBound = new pair_1.Pair(0, maximumHeight);
        var lines = new linked_list_1.LinkedList();
        this.lineSegments = lines;
        var p1 = new pair_1.Pair(0, 150);
        var p2 = new pair_1.Pair(ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH, 250);
        var baseDisplacement = p1.y - p2.y;
        var l = new splittable_line_1.SplittableLine(p1, p2, 0, baseDisplacement);
        lines.push(l);
        var numBaseLineSegments = minimumWidth / ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH;
        for (var i = 0; i < numBaseLineSegments; i++) {
            this.enqueue();
        }
        this.enqueueInterval = Math.pow(ScrollingMidpointDisplacerLinkedList.POWER, (ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS - 1));
        for (var i = 0; i < ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS; i++) {
            this.displace();
        }
        this.iterations = 0;
    }
    ScrollingMidpointDisplacerLinkedList.prototype.render = function (p) {
        this.lineSegments.forEach(function (l) {
            p.line(l.a.x, l.a.y, l.b.x, l.b.y);
        });
    };
    ScrollingMidpointDisplacerLinkedList.prototype.enqueue = function () {
        var last = this.lineSegments.peekLast();
        var beginCoordinate = new pair_1.Pair(last.b.x + 0, last.b.y + 0);
        var endCoordinate = new pair_1.Pair(beginCoordinate.x +
            ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH, Math.floor(this.verticalBound.y * Math.random()));
        var newLine = new splittable_line_1.SplittableLine(beginCoordinate, endCoordinate, 0, beginCoordinate.y - endCoordinate.y);
        this.lineSegments.push(newLine);
    };
    ScrollingMidpointDisplacerLinkedList.prototype.displace = function () {
        var lines = this.lineSegments;
        var i = this.lineSegments.length() - 1;
        while (i >= 0) {
            var l = lines.get(i);
            if (!ScrollingMidpointDisplacerLinkedList.skipSplittableLine(l)) {
                var split = l.getSplit(this.verticalBound);
                lines.splitAt(i, split);
            }
            i--;
        }
    };
    ScrollingMidpointDisplacerLinkedList.prototype.scroll = function () {
        var deltaX = ScrollingMidpointDisplacerLinkedList.MINIMUM_LINE_WIDTH;
        this.lineSegments.forEach(function (l) {
            l.translate(-1 * deltaX, 0);
        });
    };
    ScrollingMidpointDisplacerLinkedList.prototype.update = function () {
        this.iterations++;
        this.lineSegments.pop();
        this.displace();
        if (this.iterations % this.enqueueInterval == 0) {
            this.enqueue();
        }
        this.scroll();
    };
    ScrollingMidpointDisplacerLinkedList.skipSplittableLine = function (l) {
        return l.getGeneration() >= ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS - 1;
    };
    return ScrollingMidpointDisplacerLinkedList;
}());
ScrollingMidpointDisplacerLinkedList.ROUGHNESS = .8;
ScrollingMidpointDisplacerLinkedList.POWER = 2;
ScrollingMidpointDisplacerLinkedList.MINIMUM_LINE_WIDTH = 2;
ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS = 7;
ScrollingMidpointDisplacerLinkedList.INITIAL_LINE_WIDTH = (ScrollingMidpointDisplacerLinkedList.MINIMUM_LINE_WIDTH *
    Math.pow(ScrollingMidpointDisplacerLinkedList.POWER, (ScrollingMidpointDisplacerLinkedList.MAX_GENERATIONS - 1)));
exports.ScrollingMidpointDisplacerLinkedList = ScrollingMidpointDisplacerLinkedList;

},{"./linked-list":1,"./pair":3,"./splittable-line":5}],5:[function(require,module,exports){
"use strict";
var pair_1 = require("./pair");
var SplittableLine = (function () {
    function SplittableLine(a, b, generation, baseDisplacement) {
        this.a = a;
        this.b = b;
        this.generation = generation;
        this.baseDisplacement = baseDisplacement;
    }
    SplittableLine.prototype.toString = function () {
        return "Line(" + this.a.toString() + "->" + this.b.toString() + ")";
    };
    SplittableLine.prototype.getMidpoint = function () {
        var x = (this.b.x + this.a.x) / 2;
        var y = (this.b.y + this.a.y) / 2;
        return new pair_1.Pair(x, y);
    };
    SplittableLine.prototype.nextDisplacementMagnitude = function () {
        var baseDisplacementScale = Math.pow(2, (-1 * SplittableLine.ROUGHNESS));
        var displacementScale = Math.pow(baseDisplacementScale, this.generation);
        return this.baseDisplacement * displacementScale;
    };
    SplittableLine.prototype.getGeneration = function () {
        return this.generation;
    };
    SplittableLine.prototype.getBaseDisplacement = function () {
        return this.baseDisplacement;
    };
    SplittableLine.prototype.getSplit = function (verticalBound) {
        var displacementMagnitude = this.nextDisplacementMagnitude();
        var leftPoint = this.a;
        var rightPoint = this.b;
        var midpoint = this.getMidpoint();
        var verticallyDisplacedMidpointA = this.displacePointVertically(midpoint, displacementMagnitude, verticalBound);
        var verticallyDisplacedMidpointB = verticallyDisplacedMidpointA.shallowClone();
        var generation = this.getGeneration() + 1;
        var baseDisplacement = this.getBaseDisplacement();
        var leftSplittableLine = new SplittableLine(leftPoint, verticallyDisplacedMidpointA, generation, baseDisplacement);
        var rightSplittableLine = new SplittableLine(verticallyDisplacedMidpointB, rightPoint, generation, baseDisplacement);
        return new pair_1.Pair(leftSplittableLine, rightSplittableLine);
    };
    SplittableLine.prototype.displacePointVertically = function (p, displaceMagnitude, verticalBound) {
        var y = p.y + this.choose([displaceMagnitude, -displaceMagnitude]);
        y = this.clamp(y, verticalBound.x, verticalBound.y);
        return new pair_1.Pair(p.x, y);
    };
    SplittableLine.prototype.choose = function (choices) {
        return choices[Math.floor(Math.random() * choices.length)];
    };
    SplittableLine.prototype.clamp = function (x, lowerBound, upperBound) {
        return Math.min(upperBound, Math.max(x, lowerBound));
    };
    SplittableLine.prototype.translate = function (x, y) {
        this.a.x += x;
        this.a.y += y;
        this.b.x += x;
        this.b.y += y;
    };
    return SplittableLine;
}());
SplittableLine.ROUGHNESS = .6;
exports.SplittableLine = SplittableLine;

},{"./pair":3}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,